import { InjectionToken, Injectable, Optional, Inject, PLATFORM_ID, defineInjectable, inject } from '@angular/core';
import { of, throwError, ReplaySubject, fromEvent, race } from 'rxjs';
import { map, mergeMap, first, tap } from 'rxjs/operators';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Avoid using this directly, use `localStorageProviders()` for configuration.
 * It will be removed in v8.
 */
const /** @type {?} */ LOCAL_STORAGE_PREFIX = new InjectionToken('localStoragePrefix', { providedIn: 'root', factory: () => '' });
/**
 * @param {?} config
 * @return {?}
 */
function localStorageProviders(config) {
    return [
        config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : []
    ];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LocalStorageDatabase {
    /**
     * @param {?=} userPrefix
     */
    constructor(userPrefix = null) {
        this.userPrefix = userPrefix;
        /* Initializing native localStorage right now to be able to check its support on class instanciation */
        this.prefix = '';
        if (userPrefix) {
            this.prefix = `${userPrefix}_`;
        }
    }
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem(key) {
        const /** @type {?} */ unparsedData = localStorage.getItem(`${this.prefix}${key}`);
        let /** @type {?} */ parsedData = null;
        if (unparsedData != null) {
            try {
                parsedData = JSON.parse(unparsedData);
            }
            catch (/** @type {?} */ error) {
                return throwError(new Error(`Invalid data in localStorage.`));
            }
        }
        return of(parsedData);
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        if (data !== undefined) {
            localStorage.setItem(`${this.prefix}${key}`, JSON.stringify(data));
        }
        return of(true);
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        localStorage.removeItem(`${this.prefix}${key}`);
        return of(true);
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        localStorage.clear();
        return of(true);
    }
}
LocalStorageDatabase.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocalStorageDatabase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
];
/** @nocollapse */ LocalStorageDatabase.ngInjectableDef = defineInjectable({ factory: function LocalStorageDatabase_Factory() { return new LocalStorageDatabase(inject(LOCAL_STORAGE_PREFIX, 8)); }, token: LocalStorageDatabase, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MockLocalDatabase {
    constructor() {
        this.localStorage = new Map();
    }
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem(key) {
        const /** @type {?} */ rawData = this.localStorage.get(key);
        return of((rawData !== undefined) ? rawData : null);
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        this.localStorage.set(key, data);
        return of(true);
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        this.localStorage.delete(key);
        return of(true);
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        this.localStorage.clear();
        return of(true);
    }
}
MockLocalDatabase.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ MockLocalDatabase.ngInjectableDef = defineInjectable({ factory: function MockLocalDatabase_Factory() { return new MockLocalDatabase(); }, token: MockLocalDatabase, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IndexedDBDatabase {
    /**
     * Connects to IndexedDB
     * @param {?=} prefix
     */
    constructor(prefix = null) {
        this.prefix = prefix;
        /**
         * IndexedDB database name for local storage
         */
        this.dbName = 'ngStorage';
        /**
         * IndexedDB object store name for local storage
         */
        this.objectStoreName = 'localStorage';
        /**
         * IndexedDB key path name for local storage (where an item's key will be stored)
         */
        this.keyPath = 'key';
        /**
         * IndexedDB data path name for local storage (where items' value will be stored)
         */
        this.dataPath = 'value';
        /**
         * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),
         * so a fallback can be needed.
         */
        this.fallback = null;
        if (prefix) {
            this.dbName = `${prefix}_${this.dbName}`;
        }
        /* Creating the RxJS ReplaySubject */
        this.database = new ReplaySubject();
        /* Connecting to IndexedDB */
        this.connect(prefix);
    }
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem(key) {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.getItem(key);
        }
        /* Opening a trasaction and requesting the item in local storage */
        return this.getItemFromTransaction(key);
    }
    /**
     * Internal method to factorize the getter for getItem and setItem,
     * the last one needing to be from a preexisting transaction
     * @template T
     * @param {?} key The item's key
     * @param {?=} transactionParam Optional pre-existing transaction to use for the read request
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItemFromTransaction(key, transactionParam) {
        const /** @type {?} */ transaction$ = transactionParam ? of(transactionParam) : this.transaction();
        return transaction$.pipe(map((transaction) => transaction.get(key)), mergeMap((request) => {
            /* Listening to the success event, and passing the item value if found, null otherwise */
            const /** @type {?} */ success = (/** @type {?} */ (fromEvent(request, 'success'))).pipe(map((event) => (/** @type {?} */ (event.target)).result), map((result) => result && (this.dataPath in result) ? (/** @type {?} */ (result[this.dataPath])) : null));
            /* Merging success and errors events and autoclosing the observable */
            return (/** @type {?} */ (race(success, this.toErrorObservable(request, `getter`))))
                .pipe(first());
        }), first());
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.setItem(key, data);
        }
        /* Storing null is not correctly supported by IndexedDB and unnecessary here */
        if (data == null) {
            return of(true);
        }
        /* Transaction must be the same for read and write, to avoid concurrency issues */
        const /** @type {?} */ transaction$ = this.transaction('readwrite');
        let /** @type {?} */ transaction;
        /* Opening a transaction */
        return transaction$.pipe(tap((value) => {
            transaction = value;
        }), /* Check if the key already exists or not */
        mergeMap(() => this.getItemFromTransaction(key, transaction)), map((existingData) => (existingData == null) ? 'add' : 'put'), mergeMap((method) => {
            let /** @type {?} */ request;
            /* Adding or updating local storage, based on previous checking */
            switch (method) {
                case 'add':
                    request = transaction.add({ [this.dataPath]: data }, key);
                    break;
                case 'put':
                default:
                    request = transaction.put({ [this.dataPath]: data }, key);
                    break;
            }
            /* Merging success (passing true) and error events and autoclosing the observable */
            return (/** @type {?} */ (race(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`))))
                .pipe(first());
        }), first());
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.removeItem(key);
        }
        /* Opening a transaction and checking if the item exists in local storage */
        return this.getItem(key).pipe(mergeMap((data) => {
            /* If the item exists in local storage */
            if (data != null) {
                /* Opening a transaction */
                return this.transaction('readwrite').pipe(mergeMap((transaction) => {
                    /* Deleting the item in local storage */
                    const /** @type {?} */ request = transaction.delete(key);
                    /* Merging success (passing true) and error events and autoclosing the observable */
                    return (/** @type {?} */ (race(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`))))
                        .pipe(first());
                }));
            }
            /* Passing true if the item does not exist in local storage */
            return of(true);
        }), first());
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.clear();
        }
        /* Opening a transaction */
        return this.transaction('readwrite').pipe(mergeMap((transaction) => {
            /* Deleting all items from local storage */
            const /** @type {?} */ request = transaction.clear();
            /* Merging success (passing true) and error events and autoclosing the observable */
            return (/** @type {?} */ (race(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`))))
                .pipe(first());
        }), first());
    }
    /**
     * Connects to IndexedDB and creates the object store on first time
     * @param {?=} prefix
     * @return {?}
     */
    connect(prefix = null) {
        let /** @type {?} */ request;
        /* Connecting to IndexedDB */
        try {
            request = indexedDB.open(this.dbName);
        }
        catch (/** @type {?} */ error) {
            /* Fallback storage if IndexedDb connection is failing */
            this.setFallback(prefix);
            return;
        }
        /* Listening the event fired on first connection, creating the object store for local storage */
        (/** @type {?} */ (fromEvent(request, 'upgradeneeded')))
            .pipe(first())
            .subscribe((event) => {
            /* Getting the database connection */
            const /** @type {?} */ database = /** @type {?} */ ((/** @type {?} */ (event.target)).result);
            /* Checking if the object store already exists, to avoid error */
            if (!database.objectStoreNames.contains(this.objectStoreName)) {
                /* Creating the object store for local storage */
                database.createObjectStore(this.objectStoreName);
            }
        });
        /* Listening the success event and converting to an RxJS Observable */
        const /** @type {?} */ success = /** @type {?} */ (fromEvent(request, 'success'));
        /* Merging success and errors events */
        (/** @type {?} */ (race(success, this.toErrorObservable(request, `connection`))))
            .pipe(first())
            .subscribe((event) => {
            /* Storing the database connection for further access */
            this.database.next(/** @type {?} */ ((/** @type {?} */ (event.target)).result));
        }, () => {
            /* Fallback storage if IndexedDb connection is failing */
            this.setFallback(prefix);
        });
    }
    /**
     * Opens an IndexedDB transaction and gets the local storage object store
     * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations
     * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable
     */
    transaction(mode = 'readonly') {
        /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */
        return this.database
            .pipe(map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName)));
    }
    /**
     * Transforms a IndexedDB success event in an RxJS Observable
     * @param {?} request The request to listen
     * @return {?} A RxJS Observable with true value
     */
    toSuccessObservable(request) {
        /* Transforming a IndexedDB success event in an RxJS Observable with true value */
        return (/** @type {?} */ (fromEvent(request, 'success')))
            .pipe(map(() => true));
    }
    /**
     * Transforms a IndexedDB error event in an RxJS ErrorObservable
     * @param {?} request The request to listen
     * @param {?=} error Optionnal details about the error's origin
     * @return {?} A RxJS ErrorObservable
     */
    toErrorObservable(request, error = ``) {
        /* Transforming a IndexedDB error event in an RxJS ErrorObservable */
        return (/** @type {?} */ (fromEvent(request, 'error')))
            .pipe(mergeMap(() => throwError(new Error(`IndexedDB ${error} issue : ${((/** @type {?} */ (request.error))).message}.`))));
    }
    /**
     * @param {?} prefix
     * @return {?}
     */
    setFallback(prefix) {
        /* When storage is fully disabled in browser (via the "Block all cookies" option),
             * just trying to check `localStorage` variable causes a security exception.
             * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118
             */
        try {
            if ('getItem' in localStorage) {
                /* Fallback to `localStorage` if available */
                this.fallback = new LocalStorageDatabase(prefix);
            }
            else {
                /* Fallback to memory storage otherwise */
                this.fallback = new MockLocalDatabase();
            }
        }
        catch (_a) {
            /* Fallback to memory storage otherwise */
            this.fallback = new MockLocalDatabase();
        }
    }
}
IndexedDBDatabase.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IndexedDBDatabase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
];
/** @nocollapse */ IndexedDBDatabase.ngInjectableDef = defineInjectable({ factory: function IndexedDBDatabase_Factory() { return new IndexedDBDatabase(inject(LOCAL_STORAGE_PREFIX, 8)); }, token: IndexedDBDatabase, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} platformId
 * @param {?} prefix
 * @return {?}
 */
function localDatabaseFactory(platformId, prefix) {
    try {
        if (isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {
            /* Try with IndexedDB in modern browsers */
            return new IndexedDBDatabase(prefix);
        }
        else if (isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {
            /* Try with localStorage in old browsers (IE9) */
            return new LocalStorageDatabase(prefix);
        }
    }
    catch (/** @type {?} */ error) { }
    /* Fake database for server-side rendering (Universal) */
    return new MockLocalDatabase();
}
/**
 * @abstract
 */
class LocalDatabase {
}
LocalDatabase.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useFactory: localDatabaseFactory,
                deps: [
                    PLATFORM_ID,
                    [new Optional(), LOCAL_STORAGE_PREFIX]
                ]
            },] }
];
/** @nocollapse */ LocalDatabase.ngInjectableDef = defineInjectable({ factory: function LocalDatabase_Factory() { return localDatabaseFactory(inject(PLATFORM_ID), inject(LOCAL_STORAGE_PREFIX, 8)); }, token: LocalDatabase, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@todo Add other JSON Schema validation features
 */
class JSONValidator {
    /**
     * Validate a JSON data against a JSON Schema
     * @param {?} data JSON data to validate
     * @param {?} schema Subset of JSON Schema.
     * Types are enforced to validate everything:
     * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
     * Therefore, unlike the spec, booleans are not allowed as schemas.
     * Not all validation features are supported: just follow the interface.
     * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid
     */
    validate(data, schema) {
        /** @todo When TS 2.8, explore if this is possible with conditional types */
        if (((!(schema.hasOwnProperty('const') && schema.const !== undefined)
            && !(schema.hasOwnProperty('enum') && schema.enum != null) && !(schema.hasOwnProperty('type') && schema.type != null))
            || schema.type === 'array' || schema.type === 'object')
            && !(schema.hasOwnProperty('properties') && schema.properties != null) && !(schema.hasOwnProperty('items') && schema.items != null)) {
            throw new Error(`Each value must have a 'type' or 'properties' or 'items' or 'const' or 'enum', to enforce strict types.`);
        }
        if (schema.hasOwnProperty('const') && schema.const !== undefined && (data !== schema.const)) {
            return false;
        }
        if (!this.validateEnum(data, schema)) {
            return false;
        }
        if (!this.validateType(data, schema)) {
            return false;
        }
        if (!this.validateItems(data, schema)) {
            return false;
        }
        if (!this.validateProperties(data, schema)) {
            return false;
        }
        if (!this.validateRequired(data, schema)) {
            return false;
        }
        return true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isObjectNotNull(value) {
        return (value !== null) && (typeof value === 'object');
    }
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    validateProperties(data, schema) {
        if (!schema.hasOwnProperty('properties') || (schema.properties == null)) {
            return true;
        }
        if (!this.isObjectNotNull(data)) {
            return false;
        }
        /**
             * Check if the object doesn't have more properties than expected
             * Equivalent of additionalProperties: false
             */
        if (Object.keys(schema.properties).length < Object.keys(data).length) {
            return false;
        }
        /* Recursively validate all properties */
        for (const /** @type {?} */ property in schema.properties) {
            if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {
                if (!this.validate(data[property], schema.properties[property])) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    validateRequired(data, schema) {
        if (!schema.hasOwnProperty('required') || (schema.required == null)) {
            return true;
        }
        if (!this.isObjectNotNull(data)) {
            return false;
        }
        for (const /** @type {?} */ requiredProp of schema.required) {
            /* Checks if the property is present in the schema 'properties' */
            if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {
                throw new Error(`'required' properties must be described in 'properties' too.`);
            }
            /* Checks if the property is present in the data */
            if (!data.hasOwnProperty(requiredProp)) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    validateEnum(data, schema) {
        if (!schema.hasOwnProperty('enum') || (schema.enum == null)) {
            return true;
        }
        /** @todo Move to ES2016 .includes() ? */
        return (schema.enum.indexOf(data) !== -1);
    }
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    validateType(data, schema) {
        if (!schema.hasOwnProperty('type') || (schema.type == null)) {
            return true;
        }
        switch (schema.type) {
            case 'null':
                return data === null;
            case 'string':
                return this.validateString(data, schema);
            case 'number':
            case 'integer':
                return this.validateNumber(data, schema);
            case 'boolean':
                return typeof data === 'boolean';
            case 'object':
                return typeof data === 'object';
            case 'array':
                return Array.isArray(data);
        }
    }
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    validateItems(data, schema) {
        if (!schema.hasOwnProperty('items') || (schema.items == null)) {
            return true;
        }
        if (!Array.isArray(data)) {
            return false;
        }
        if (schema.hasOwnProperty('maxItems') && (schema.maxItems != null)) {
            if (!Number.isInteger(schema.maxItems) || schema.maxItems < 0) {
                throw new Error(`'maxItems' must be a non-negative integer.`);
            }
            if (data.length > schema.maxItems) {
                return false;
            }
        }
        if (schema.hasOwnProperty('minItems') && (schema.minItems != null)) {
            if (!Number.isInteger(schema.minItems) || schema.minItems < 0) {
                throw new Error(`'minItems' must be a non-negative integer.`);
            }
            if (data.length < schema.minItems) {
                return false;
            }
        }
        if (schema.hasOwnProperty('uniqueItems') && (schema.uniqueItems != null)) {
            if (schema.uniqueItems) {
                const /** @type {?} */ dataSet = new Set(data);
                if (data.length !== dataSet.size) {
                    return false;
                }
            }
        }
        if (Array.isArray(schema.items)) {
            return this.validateItemsList(data, schema);
        }
        for (const /** @type {?} */ value of data) {
            if (!this.validate(value, schema.items)) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    validateItemsList(data, schema) {
        const /** @type {?} */ items = /** @type {?} */ (schema.items);
        if (data.length !== items.length) {
            return false;
        }
        for (let /** @type {?} */ i = 0; i < items.length; i += 1) {
            if (!this.validate(data[i], items[i])) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    validateString(data, schema) {
        if (typeof data !== 'string') {
            return false;
        }
        if (schema.hasOwnProperty('maxLength') && (schema.maxLength != null)) {
            if (!Number.isInteger(schema.maxLength) || schema.maxLength < 0) {
                throw new Error(`'maxLength' must be a non-negative integer.`);
            }
            if (data.length > schema.maxLength) {
                return false;
            }
        }
        if (schema.hasOwnProperty('minLength') && (schema.minLength != null)) {
            if (!Number.isInteger(schema.minLength) || schema.minLength < 0) {
                throw new Error(`'minLength' must be a non-negative integer.`);
            }
            if (data.length < schema.minLength) {
                return false;
            }
        }
        if (schema.hasOwnProperty('pattern') && (schema.pattern != null)) {
            const /** @type {?} */ regularExpression = new RegExp(schema.pattern);
            if (!regularExpression.test(data)) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    validateNumber(data, schema) {
        if (typeof data !== 'number') {
            return false;
        }
        if ((schema.type === 'integer') && !Number.isInteger(data)) {
            return false;
        }
        if (schema.hasOwnProperty('multipleOf') && (schema.multipleOf != null)) {
            if (schema.multipleOf <= 0) {
                throw new Error(`'multipleOf' must be a number strictly greater than 0.`);
            }
            if (!Number.isInteger(data / schema.multipleOf)) {
                return false;
            }
        }
        if (schema.hasOwnProperty('maximum') && (schema.maximum != null)) {
            if (data > schema.maximum) {
                return false;
            }
        }
        if (schema.hasOwnProperty('exclusiveMaximum') && (schema.exclusiveMaximum != null)) {
            if (data >= schema.exclusiveMaximum) {
                return false;
            }
        }
        if (schema.hasOwnProperty('minimum') && (schema.minimum != null)) {
            if (data < schema.minimum) {
                return false;
            }
        }
        if (schema.hasOwnProperty('exclusiveMinimum') && (schema.exclusiveMinimum != null)) {
            if (data <= schema.exclusiveMinimum) {
                return false;
            }
        }
        return true;
    }
}
JSONValidator.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ JSONValidator.ngInjectableDef = defineInjectable({ factory: function JSONValidator_Factory() { return new JSONValidator(); }, token: JSONValidator, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LocalStorage {
    /**
     * @param {?} database
     * @param {?} jsonValidator
     */
    constructor(database, jsonValidator) {
        this.database = database;
        this.jsonValidator = jsonValidator;
        this.getItemOptionsDefault = {
            schema: null
        };
    }
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @param {?=} options
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem(key, options = this.getItemOptionsDefault) {
        return this.database.getItem(key).pipe(/* Validate data upon a json schema if requested */
        mergeMap((data) => {
            if (options.schema && data !== null) {
                let /** @type {?} */ validation = true;
                try {
                    validation = this.jsonValidator.validate(data, options.schema);
                }
                catch (/** @type {?} */ error) {
                    return throwError(error);
                }
                if (!validation) {
                    return throwError(new Error(`JSON invalid`));
                }
            }
            return of(data);
        }));
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        return this.database.setItem(key, data);
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        return this.database.removeItem(key);
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        return this.database.clear();
    }
    /**
     * Sets an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?}
     */
    setItemSubscribe(key, data) {
        this.setItem(key, data).subscribe(() => { }, () => { });
    }
    /**
     * Deletes an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @return {?}
     */
    removeItemSubscribe(key) {
        this.removeItem(key).subscribe(() => { }, () => { });
    }
    /**
     * Deletes all items from local storage, and auto-subscribes
     * @return {?}
     */
    clearSubscribe() {
        this.clear().subscribe(() => { }, () => { });
    }
}
LocalStorage.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocalStorage.ctorParameters = () => [
    { type: LocalDatabase },
    { type: JSONValidator }
];
/** @nocollapse */ LocalStorage.ngInjectableDef = defineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(inject(LocalDatabase), inject(JSONValidator)); }, token: LocalStorage, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { LocalDatabase, IndexedDBDatabase, LocalStorageDatabase, MockLocalDatabase, JSONValidator, LocalStorage, localStorageProviders, LOCAL_STORAGE_PREFIX, localDatabaseFactory as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,